///////////////////////////
lab-1
/////////////////
#include<bits/stdc++.h>
using namespace std;

string encrypt(string text, int s)
{
    string result = "";
    for (int i=0; i<text.length(); i++)
    {
        // Encrypt Uppercase letters
        if (isupper(text[i]))
            result += char(int(text[i]+s-65)%26 +65);
        // Encrypt Lowercase letters
        else if(islower(text[i]))
            result += char(int(text[i]+s-97)%26 +97);
        else
            result += text[i];
    }
    return result;
}

string decrypt(string text, int s)
{
    s = 26 - s;
    string result = "";
    for (int i=0; i<text.length(); i++)
    {
        // Encrypt Uppercase letters
        if (isupper(text[i]))
            result += char(int(text[i]+s-65)%26 +65);
        // Encrypt Lowercase letters
        else if(islower(text[i]))
            result += char(int(text[i]+s-97)%26 +97);
        else
            result += text[i];
    }
    return result;
}

int main()
{
    string text;
    cout<<"Enter your original text: ";
    getline(cin, text);

    int shift;
    cout<<"Enter how many shift to the right: ";
    cin>>shift;

    string chiper = encrypt(text, shift%26);
    cout << "\nCipher: " << chiper <<endl;

    string original = decrypt(chiper, shift);
    cout << "\nAfter Reverse Operation: " << original <<endl;
    return 0;
}

//////////////////////////////
lab-2
////////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;

map <string, string> encryptData;
map <string, string> decryptData;

void fn(string str)
{
    ifstream  readChiperLower, readChiperUpper;

    string msg, cipher;

    if(islower(str[0]))
    {
        readChiperLower.open("dictionary.txt");
        while( readChiperLower >> msg >> cipher)
        {
            encryptData[msg] = cipher;
            decryptData[cipher] = msg;
        }
        readChiperLower.close();
    }

    if(isupper(str[0]))
    {
        readChiperUpper.open("dictionary2.txt");
        while(readChiperUpper >> msg >> cipher)
        {
            encryptData[msg] = cipher;
            decryptData[cipher] = msg;
        }
        readChiperUpper.close();
    }
}

string PlaintextToCipher(string text)
{
    replace(text.begin(), text.end(), ' ', '_');
    string block;
    int startPos = 0;

    for(int i = 0; i < text.size(); i++)
    {
        block += text[i];

        if(block.size() == 3)
        {
            block = encryptData[block];

            int x, y;
            for(x = startPos, y = 0; y < 3 ; y++, x++)
            {
                text[x] = block[y];
            }

            startPos = x;
            block.clear();
        }
    }
    return text;
}

string CipherToPlaintext(string encrypt)
{
    string block;
    int startPos = 0;

    for(int i = 0; i < encrypt.length(); i++)
    {
        block += encrypt[i];

        if(block.size() == 3)
        {
            block = decryptData[block];

            int x, y;
            for(x = startPos, y = 0; y < 3 ; y++, x++)
            {
                encrypt[x] = block[y];
            }
            startPos = x;
            block.clear();
        }
    }
    replace(encrypt.begin(), encrypt.end(), '_', ' ');
    return encrypt;
}

int main(int argc, char const *argv[])
{
    string text;
    cout<<"Enter your original text: ";
    getline(cin, text);

    fn(text);
    cout << "......................" <<endl;

    cout << "Plain Text: "<< text << endl << endl;

    string encrypt = PlaintextToCipher(text);

    cout <<"Cipher: " << encrypt << endl << endl;

    string decrypt = CipherToPlaintext(encrypt);

    cout << "After Reverse Operation The Plain Text is: "<< decrypt << endl;

    return 0;
}

//////////////////////
lab-3
/////////////////////////////
#include <bits/stdc++.h>
using namespace std;

string TextToCipher(string text, int width)
{
    string encrypt;

    int step = 0, i = 0;
    while( step < width )
    {
        encrypt += text[i];

        i += width;
        if (i >= text.size())
        {
            i = ++step;
        }
    }
    return encrypt;
}

string CipherToText(string encrypt, int width)
{
    string dercypt(encrypt.size(), '#');

    int step = 0;
    for(int i = 0, j = step; i < encrypt.size(); i++)
    {
        dercypt[j] = encrypt[i];

        j += width;
        if (j >= encrypt.size())
        {
            j = ++step;
        }
    }
    return dercypt;
}

int main()
{
   string text = "DEPARTMENT OF COMPUTER SCIENCE AND TECHNOLOGY UNIVERSITY OF RAJSHAHI BANGLADESH";

   int width;
   cout<<"Enter width: ";
   cin>>width;

   cout<<"\nPlain text: "<< text << endl;

   string encrypt = TextToCipher(text, width);
   cout<<"\nEncrypted text: "<< encrypt << endl;

   string dercypt = CipherToText(encrypt, width);
   cout<< "\nAfter Reverse Operation Decypted text: "<< dercypt <<endl;

   return 0;
}
////////////////////////////////////
lab-4
/////////////////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;

string TextToCipher(string text, int width)
{
    string encrypt;

    int step = 0, i = 0;
    while( step < width )
    {
        encrypt += text[i];

        i += width;
        if (i >= text.size())
        {
            i = ++step;
        }
    }
    return encrypt;
}

string CipherToText(string encrypt, int width)
{
    string dercypt(encrypt.size(), '#');

    int step = 0;
    for(int i = 0, j = step; i < encrypt.size(); i++)
    {
        dercypt[j] = encrypt[i];

        j += width;
        if (j >= encrypt.size())
        {
            j = ++step;
        }
    }
    return dercypt;
}


int main(int argc, char const *argv[])
{
    string text = "DEPARTMENT OF COMPUTER SCIENCE AND TECHNOLOGY UNIVERSITY OF RAJSHAHI BANGLADESH";

    int width;
    cout<<"Enter width: ";
    cin>>width;

    cout<<"\nPlain text: "<< text << endl;

    string encrypt = TextToCipher(text, width);
    encrypt = TextToCipher(encrypt, width);

    cout<<"\nEncrypted text: "<< encrypt << endl;

    string dercypt = CipherToText(encrypt, width);
    dercypt = CipherToText(dercypt, width);

    cout<< "\nAfter Reverse Operation Decypted text: "<< dercypt <<endl;
    return 0;
}

////////////////////////////////
dictionary.cpp //lab-2
///////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;

int main()
{
    string msg, chiper;
    freopen("dictionary.txt","r",stdin);
    freopen("dictionary2.txt","w",stdout);
    while(cin>>msg>>chiper)
    {
        transform(msg.begin(), msg.end(), msg.begin(), ::toupper);
        transform(chiper.begin(), chiper.end(), chiper.begin(), ::toupper);
        cout<<msg<<" "<<chiper<<endl;
    }
    return 0;
}

///////////////////////////////
